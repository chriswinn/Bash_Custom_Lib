#!/bin/bash


############################
#
# Encryption Script
# Coded by chriswinn
# Version 2.0
#
#	To use this backup script simply fill in the variable below
#	If you want to disable certain features read the comments on how to change it
#
############################
########## BEGIN: setting up Encryption
############################
	############################
	# Update: Default Encryption Variables
	# Section
	############################
	SCRIPT_NAME=Encryption

	############################
	# Update: Default Imports
	# Section
	############################
	DEFAULT_DECRYPTION_IMPORTS="$HOME/.bin/lib/cipher/_encryption.import"
	#### rsync - script settings
	    if [ -f $DEFAULT_DECRYPTION_IMPORTS ]; then
			verbose.print "# Importing encryption settings from '$DEFAULT_DECRYPTION_IMPORTS'."
			. $DEFAULT_DECRYPTION_IMPORTS
		else
			error.filenotfound $DEFAULT_DECRYPTION_IMPORTS
	    fi

############################
########## END: setting up Encryption
############################


############################
########## BEGIN: Encryption
############################
	############################
	# Encryption: Source
	# Section
	############################
	#This variable sets the directory or file to backup
	#$ENCRYPT_ME
		############################
		# FILENAME & DIRECTORY: Check
		# Section
		############################
		if [ ! -z $FILENAME_VERIFIED ]; then
			#This variable sets the FILENAME to decrypt.
			ENCRYPT_ME=("$FILENAME_VERIFIED")
		elif [ ! -z $DIRECTORY_VERIFIED ]; then
			#This variable sets the DIRECTORY to decrypt.
			ENCRYPT_ME=("$DIRECTORY_VERIFIED")
		fi
		
	################################################################################
	# Encryption: Password
	# Section
	################################################################################
	#This variable sets the password to use as the encryption key
	ENCRYPTPASS=("-k $PASSWORD_VERIFIED")

	################################################################################
	# Encryption: File Names
	# Section
	################################################################################
	#These variables set the names of the files created, do not modify the extensions
	UNENCRYPTEDARCHIVE_TEMP=("$ENCRYPT_ME-$(date +%d%m%Y).aes-un.tar.gz")
	UNENCRYPTEDARCHIVE=("$ENCRYPT_ME-$(date +%d%m%Y).tar.gz")
	ENCRYPTEDARCHIVE=("$ENCRYPT_ME-$(date +%d%m%Y).aes")


############################
# Encryption: Actual Command
# Section
############################
#### Encryption - actual command
	#Archives the files
	verbose.print "Archiving files"
	tar -czvf $UNENCRYPTEDARCHIVE_TEMP $ENCRYPT_ME

	# Build the actual command
	# NOTE the specific path to the "special" version of rsync
	#COMMAND=("/usr/bin/rsync $OPTS $EXCLUDES $ENCRYPT_ME $BACKUPDEST")
	COMMAND=("openssl $ENCRYPT_OPTS -in $UNENCRYPTEDARCHIVE_TEMP -out $ENCRYPTEDARCHIVE $ENCRYPTPASS")

	############################
	# Script: Default Command
	# Section
	############################
	DEFAULT_SCRIPT_COMMAND="$HOME/.bin/lib/script/_command.default"
	#### rsync - script settings
	    if [ -f $DEFAULT_SCRIPT_COMMAND ]; then
			verbose.print "# Importing default command from '$DEFAULT_SCRIPT_COMMAND'."
			. $DEFAULT_SCRIPT_COMMAND
		else
			error.filenotfound $DEFAULT_SCRIPT_COMMAND
	    fi

		#Renaming the temporary Archive
		mv $UNENCRYPTEDARCHIVE_TEMP $UNENCRYPTEDARCHIVE
		if [ "$REMOVEUNENCRYPTEDARCHIVE" = "YES" ]; then
			growl.notification "Removing $UNENCRYPTEDARCHIVE"
			#Removing the Archive
			rm $UNENCRYPTEDARCHIVE
		fi

	# the end.
		
############################
########## END: Encryption
############################
